{"title":"Lynda - Foundations of Programming: Design Patterns","uid":9689433,"size":352640309,"categoryP":"video","categoryS":"other","magnet":"?xt=urn:btih:76b71fa81e82881f45b3328ed79ff2e0324ff0f3&amp;dn=Lynda+-+Foundations+of+Programming%3A+Design+Patterns&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":17,"leechers":3,"uploader":"getById","files":52,"time":1393836637,"description":"Foundations of Programming: Design Patterns\n\nDesign patterns are reusable solutions that solve the challenges software developers face over and over again. Rather than reinventing the wheel, learn how to make use of these proven and tested patterns that will make your software more reliable and flexible to change. This course will introduce you to design patterns and take you through seven of the most used object-oriented patterns that will make your development faster and easier. Elisabeth Robson and Eric Freeman, coauthors of Head First Design Patterns, join forces to provide an overview of each pattern and examples of the pattern in action. Featured design patterns include the strategy, observer, decorator, singleton, collection, state, and factory method patterns.\n\n\nFoundations.Of.Programming.Design.Patterns\n|\n|---Exercise.Files.7z\n|---Foundations.Of.Programming.Design.Patterns.pls\n|---Foundations.Of.Programming.Design.Patterns.sfv\n|\n|---00. Introduction\n|   |---00.01. Welcome.f4v\n|   |---00.02. What you should know before watching this course.f4v\n|   |---00.03. Using the exercise files.f4v\n|\n|---01. Design Patterns\n|   |---01.01. Understanding the need for design patterns.f4v\n|   |---01.02. What are design patterns.f4v\n|   |---01.03. Using design patterns.f4v\n|\n|---02. The Strategy Pattern\n|   |---02.01. Understanding the pitfalls of inheritance and interfaces.f4v\n|   |---02.02. Encapsulating code that varies.f4v\n|   |---02.03. Programming to an interface.f4v\n|   |---02.04. Setting behavior dynamically.f4v\n|   |---02.05. Exploring the strategy pattern.f4v\n|   |---02.06. Understanding why HAS-A is better than IS-A.f4v\n|\n|---03. The Observer Pattern\n|   |---03.01. Using the observer pattern in the real world.f4v\n|   |---03.02. Exploring the observer pattern.f4v\n|   |---03.03. Understanding the observer pattern.f4v\n|   |---03.04. Implementing the observer pattern.f4v\n|   |---03.05. Using Java's Observer and Observable classes.f4v\n|   |---03.06. Implementing the observer pattern with Java's Observer and Observable classes.f4v\n|   |---03.07. The advantages of loose coupling.f4v\n|\n|---04. The Decorator Pattern\n|   |---04.01. Creating chaos with inheritance.f4v\n|   |---04.02. Understanding the open-closed principle.f4v\n|   |---04.03. Extending behavior with composition.f4v\n|   |---04.04. Understanding the decorator pattern.f4v\n|   |---04.05. Implementing the decorator pattern.f4v\n|   |---04.06. Understanding decorators in Java libraries.f4v\n|   |---04.07. Using java.io decorators.f4v\n|\n|---05. The Singleton Pattern\n|   |---05.01. What is the singleton pattern.f4v\n|   |---05.02. Understanding the classic singleton pattern.f4v\n|   |---05.03. Implementing the classic singleton pattern.f4v\n|   |---05.04. Dealing with multithreading.f4v\n|   |---05.05. Improving the singleton pattern implementation.f4v\n|\n|---06. The State Pattern\n|   |---06.01. What is a state machine.f4v\n|   |---06.02. Revisiting the design for a state machine.f4v\n|   |---06.03. Understanding the state pattern.f4v\n|   |---06.04. Implementing the state pattern.f4v\n|   |---06.05. Comparing the state and strategy patterns.f4v\n|\n|---07. The Collection Pattern\n|   |---07.01. Encapsulating iteration.f4v\n|   |---07.02. Exploring the iterator pattern.f4v\n|   |---07.03. Implementing the iterator pattern.f4v\n|   |---07.04. Using Java's built-in iterators.f4v\n|   |---07.05. Implementing with Java's built-in iterators.f4v\n|   |---07.06. Making sure classes have only one responsibility.f4v\n|\n|---08. Factories\n|   |---08.01. Encapsulating object creation.f4v\n|   |---08.02. Understanding the Simple Factory idiom.f4v\n|   |---08.03. Implementing the Simple Factory idiom.f4v\n|   |---08.04. Exploring the factory method pattern.f4v\n|   |---08.05. Implementing the factory method pattern.f4v\n|\n|---09. Conclusion\n|   |---09.01. Looking at what we've done and where to go from here.f4v\n|   |---09.02. Additional resources.f4v\n*","torrent":{"xt":"urn:btih:76b71fa81e82881f45b3328ed79ff2e0324ff0f3","amp;dn":"Lynda+-+Foundations+of+Programming%3A+Design+Patterns","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"76b71fa81e82881f45b3328ed79ff2e0324ff0f3","infoHashBuffer":{"type":"Buffer","data":[118,183,31,168,30,130,136,31,69,179,50,142,215,159,242,224,50,79,240,243]},"announce":[],"urlList":[]}}